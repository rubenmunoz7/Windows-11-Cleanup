# Windows 11 Daily Cleanup Script
# This script performs daily system cleanup operations silently

# Requires -RunAsAdministrator

# Initialize logging to ProgramData
$logFolder = "C:\ProgramData\CleanupLogs"
if (-not (Test-Path $logFolder)) {
    New-Item -Path $logFolder -ItemType Directory -Force
}
$logFile = "$logFolder\CleanupLog_$(Get-Date -Format 'yyyyMMdd_HHmmss').txt"
$date = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
Add-Content -Path $logFile -Value "=== Daily Cleanup Started at $date ==="

# Function to safely remove folder contents with progress
function Remove-FolderContents {
    param (
        [string]$Path,
        [string]$Description
    )
    
    if (Test-Path $Path) {
        Add-Content -Path $logFile -Value "Cleaning $Description..."
        Write-Progress -Activity "System Cleanup" -Status "Cleaning $Description" -PercentComplete 0
        
        try {
            $items = Get-ChildItem -Path $Path -Force
            $total = $items.Count
            $current = 0
            
            foreach ($item in $items) {
                $current++
                $percent = ($current / $total) * 100
                Write-Progress -Activity "System Cleanup" -Status "Cleaning $Description" -PercentComplete $percent -CurrentOperation $item.Name
                
                try {
                    Remove-Item $item.FullName -Force -Recurse -ErrorAction Stop
                } catch {
                    $errMsg = $_.Exception.Message
                    Add-Content -Path $logFile -Value ("Could not remove " + $item.FullName + ": " + $errMsg)
                }
            }
            
            Write-Progress -Activity "System Cleanup" -Status "Cleaning $Description" -PercentComplete 100 -Completed
            Add-Content -Path $logFile -Value "Successfully cleaned $Description"
        } catch {
            Write-Progress -Activity "System Cleanup" -Status "Cleaning $Description" -PercentComplete 100 -Completed
            $errMsg = $_.Exception.Message
            Add-Content -Path $logFile -Value ("Error cleaning " + $Description + ": " + $errMsg)
        }
    } else {
        Add-Content -Path $logFile -Value "$Description path not found: $Path"
    }
}
# Function to clean Chrome cache while preserving important data
function Remove-ChromeCache {
    param (
        [string]$CachePath,
        [string[]]$PreservePatterns
    )
    
    if (Test-Path $CachePath) {
        Add-Content -Path $logFile -Value "Cleaning Chrome Cache..."
        Write-Progress -Activity "System Cleanup" -Status "Cleaning Chrome Cache" -PercentComplete 0
        
        try {
            $items = Get-ChildItem -Path $CachePath -Force
            $total = $items.Count
            $current = 0
            
            foreach ($item in $items) {
                $current++
                $percent = ($current / $total) * 100
                Write-Progress -Activity "System Cleanup" -Status "Cleaning Chrome Cache" -PercentComplete $percent -CurrentOperation $item.Name
                
                $shouldPreserve = $false
                foreach ($pattern in $PreservePatterns) {
                    if ($item.Name -like $pattern) {
                        $shouldPreserve = $true
                        break
                    }
                }
                
                if (-not $shouldPreserve) {
                    try {
                        Remove-Item $item.FullName -Force -Recurse -ErrorAction Stop
                    } catch {
                        Add-Content -Path $logFile -Value "Could not remove Chrome cache item $($item.FullName): $($_.Exception.Message)"
                    }
                }
            }
            
            Write-Progress -Activity "System Cleanup" -Status "Cleaning Chrome Cache" -PercentComplete 100 -Completed
            Add-Content -Path $logFile -Value "Chrome Cache cleaned successfully"
        } catch {
            Write-Progress -Activity "System Cleanup" -Status "Cleaning Chrome Cache" -PercentComplete 100 -Completed
            Add-Content -Path $logFile -Value "Error cleaning Chrome Cache: $($_.Exception.Message)"
        }
    }
}

# Function to clean Microsoft Edge cache
function Remove-EdgeCache {
    param (
        [string[]]$EdgeCachePaths
    )

    Add-Content -Path $logFile -Value "Cleaning Microsoft Edge Cache..."
    Write-Progress -Activity "System Cleanup" -Status "Cleaning Microsoft Edge Cache" -PercentComplete 0

    foreach ($path in $EdgeCachePaths) {
        if (Test-Path $path) {
            try {
                Get-ChildItem -Path $path -Recurse -Force -ErrorAction SilentlyContinue | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
                Add-Content -Path $logFile -Value "Cleared: $path"
            } catch {
                Add-Content -Path $logFile -Value "Error clearing Edge cache path ${path}:$($_.Exception.Message)"
            }
        } else {
            Add-Content -Path $logFile -Value "Edge cache path not found: $path"
        }
    }

    Write-Progress -Activity "System Cleanup" -Status "Cleaning Microsoft Edge Cache" -PercentComplete 100 -Completed
    Add-Content -Path $logFile -Value "Microsoft Edge Cache cleaned successfully"
}

# Main cleanup operations
try {
    # Empty Recycle Bin
    Write-Progress -Activity "System Cleanup" -Status "Emptying Recycle Bin" -PercentComplete 0
    Clear-RecycleBin -Force -ErrorAction SilentlyContinue
    Add-Content -Path $logFile -Value "Recycle Bin emptied."
    Write-Progress -Activity "System Cleanup" -Status "Emptying Recycle Bin" -PercentComplete 100 -Completed
    
    # Clean Temp files
    $tempPaths = @("$env:TEMP", "C:\Windows\Temp")
    foreach ($tempPath in $tempPaths) {
        Remove-FolderContents -Path $tempPath -Description "Temp folder"
    }
    
    # Clean Windows Update Cache
    Write-Progress -Activity "System Cleanup" -Status "Cleaning Windows Update Cache" -PercentComplete 0
    try {
        Stop-Service -Name "wuauserv" -Force -ErrorAction Stop
        Remove-FolderContents -Path "C:\Windows\SoftwareDistribution\Download" -Description "Windows Update cache"
        Start-Service -Name "wuauserv"
        Add-Content -Path $logFile -Value "Windows Update Cache cleared."
    } catch {
        Add-Content -Path $logFile -Value "Error managing Windows Update service: $($_.Exception.Message)"
    }
    Write-Progress -Activity "System Cleanup" -Status "Cleaning Windows Update Cache" -PercentComplete 100 -Completed
    
    # Clean Chrome Cache
    $chromeCachePath = "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache"
    $chromePreservePatterns = @("Cookies", "Preferences")
    Remove-ChromeCache -CachePath $chromeCachePath -PreservePatterns $chromePreservePatterns

    # Clean Microsoft Edge Cache
    $edgeCachePaths = @(
        "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache",
        "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Code Cache",
        "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Media Cache"
    )
    Remove-EdgeCache -EdgeCachePaths $edgeCachePaths

    # Clean Windows Store Cache
    Remove-FolderContents -Path "$env:LOCALAPPDATA\Packages\Microsoft.WindowsStore_8wekyb3d8bbwe\LocalCache" -Description "Windows Store cache"
    
    # Clean Thumbnail Cache
    Write-Progress -Activity "System Cleanup" -Status "Cleaning Thumbnail Cache" -PercentComplete 0
    try {
        Stop-Process -Name explorer -Force -ErrorAction SilentlyContinue
        Start-Sleep -Seconds 2
        Remove-FolderContents -Path "$env:LOCALAPPDATA\Microsoft\Windows\Explorer" -Description "Thumbnail cache"
        Start-Process explorer.exe
        Add-Content -Path $logFile -Value "Windows Thumbnail cache cleared."
    } catch {
        Add-Content -Path $logFile -Value "Error managing Thumbnail cache: $($_.Exception.Message)"
    }
    Write-Progress -Activity "System Cleanup" -Status "Cleaning Thumbnail Cache" -PercentComplete 100 -Completed
    
    # Clean Prefetch
    Remove-FolderContents -Path "C:\Windows\Prefetch" -Description "Prefetch"
    
    # Clean Recent Items
    Remove-FolderContents -Path "$env:APPDATA\Microsoft\Windows\Recent" -Description "Recent Items"
    
    # Clean Windows Error Reports
    Remove-FolderContents -Path "C:\ProgramData\Microsoft\Windows\WER\ReportArchive" -Description "Windows Error Reports"
    
    # Run Disk Cleanup
    Write-Progress -Activity "System Cleanup" -Status "Running Disk Cleanup" -PercentComplete 0
    Add-Content -Path $logFile -Value "Running Disk Cleanup..."
    $regKey = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VolumeCaches"
    Get-ChildItem $regKey | ForEach-Object {
        Set-ItemProperty -Path "$regKey\$($_.PSChildName)" -Name "StateFlags0064" -Value 2 -Type DWord -ErrorAction SilentlyContinue
    }
    Start-Process cleanmgr.exe -ArgumentList "/sagerun:64" -Wait -NoNewWindow
    Add-Content -Path $logFile -Value "Disk Cleanup completed."
    Write-Progress -Activity "System Cleanup" -Status "Running Disk Cleanup" -PercentComplete 100 -Completed
    
    # Clean old logs
    $logRetentionDate = (Get-Date).AddDays(-7)
    Get-ChildItem -Path (Split-Path $logFile) -Filter "CleanupLog*.txt" | 
    Where-Object { $_.LastWriteTime -lt $logRetentionDate } | 
    ForEach-Object {
        Remove-Item $_.FullName -Force
        Add-Content -Path $logFile -Value "Removed old log file: $($_.Name)"
    }
    
} catch {
    Add-Content -Path $logFile -Value "Critical error during cleanup: $($_.Exception.Message)"
    Write-Progress -Activity "System Cleanup" -Status "Error" -PercentComplete 100 -Completed
    Write-Output "UNSUCCESSFUL"
    exit 1
}

$endDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
Add-Content -Path $logFile -Value "=== Daily Cleanup Completed at $endDate ==="
Write-Progress -Activity "System Cleanup" -Status "Complete" -PercentComplete 100 -Completed

Write-Output "SUCCESS"
exit 0
